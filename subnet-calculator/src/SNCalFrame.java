
import javax.swing.DefaultComboBoxModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author KAZDO
 */
public class SNCalFrame extends javax.swing.JFrame {
    SubnetCalculator sc = new SubnetCalculator("B", "172.16.0.1", "255.255.0.0", 0, 16, 1, 65534);
    /**
     * Creates new form SNCalFrame
     */
    public SNCalFrame() {
        initComponents();
        setSelectRange();
        setShowData();
    }    
    
    public void setSelectRange() {
        setRangeSubnetMask();
        setRangeSubnetBit();
        setRangeMaskBit();
        setRangeMaximumSubnet();
        setRangeHostPerSubnet();
    }
    
    public void setSelectData() {
        CBB_SubnetMask.setSelectedItem(sc.getSubnetMask());
        CBB_SubnetBit.setSelectedItem(Integer.parseInt(sc.getSubnetBit()));
        CBB_MaskBit.setSelectedItem(Integer.parseInt(sc.getMaskBit()));
        CBB_MaximumSubnet.setSelectedItem(Integer.parseInt(sc.getMaximumSubnet()));
        CBB_HostPerSubnet.setSelectedItem(Integer.parseInt(sc.getHostPerSubnet()));
    }
    
    public void setShowData() {
        Label_FirstOctetRange.setText(sc.getFirstOctetRange());
        Txt_IPAddress.setText(sc.getIPAddress());
        Label_HexIPAddress.setText(sc.getHexIpAddress());
        Label_WildcardMask.setText(sc.getWildcardMask());
        Label_HostAddressRange.setText(sc.getHostAddressRange());
        Label_SubnetID.setText(sc.getSubnetId());
        Label_BroadcastAddress.setText(sc.getBroadcastAddress());
        Label_SubnetBitmap.setText(sc.getSubnetBitmap());
        Label_PercentUse.setText(sc.getPercentUse());
    }
    
    public void syncData() {
        sc.syncSubnetBit();
        sc.syncMaskBit();
        sc.syncMaximumSubnet();
        sc.syncHostPerSubnet();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG_NetworkClass = new javax.swing.ButtonGroup();
        Panel_BackGround = new javax.swing.JPanel();
        Panel_NetworkClass = new javax.swing.JPanel();
        RBtn_ClassA = new javax.swing.JRadioButton();
        RBtn_ClassB = new javax.swing.JRadioButton();
        RBtn_ClassC = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Label_PercentUse = new javax.swing.JLabel();
        Panel_IPAddress = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Txt_IPAddress = new javax.swing.JTextField();
        Panel_FirstOctetRange = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Label_FirstOctetRange = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Label_HexIPAddress = new javax.swing.JLabel();
        Panel_SubnetMask = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        CBB_SubnetMask = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Label_WildcardMask = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        Label_HostAddressRange = new javax.swing.JLabel();
        Panel_SubnetMask2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        CBB_SubnetBit = new javax.swing.JComboBox<>();
        Panel_SubnetMask3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        CBB_MaskBit = new javax.swing.JComboBox<>();
        Panel_SubnetMask4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        CBB_MaximumSubnet = new javax.swing.JComboBox<>();
        Panel_SubnetMask5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        CBB_HostPerSubnet = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        Label_SubnetID = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        Label_BroadcastAddress = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        Label_SubnetBitmap = new javax.swing.JLabel();

        BG_NetworkClass.add(RBtn_ClassA);
        BG_NetworkClass.add(RBtn_ClassB);
        BG_NetworkClass.add(RBtn_ClassC);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Subnet Calculator");
        setResizable(false);

        RBtn_ClassA.setText("A");
        RBtn_ClassA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBtn_ClassAActionPerformed(evt);
            }
        });

        RBtn_ClassB.setSelected(true);
        RBtn_ClassB.setText("B");
        RBtn_ClassB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBtn_ClassBActionPerformed(evt);
            }
        });

        RBtn_ClassC.setText("C");
        RBtn_ClassC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBtn_ClassCActionPerformed(evt);
            }
        });

        jLabel1.setText("Network Class");

        jLabel12.setText("Percent Used");

        Label_PercentUse.setText("100%");

        javax.swing.GroupLayout Panel_NetworkClassLayout = new javax.swing.GroupLayout(Panel_NetworkClass);
        Panel_NetworkClass.setLayout(Panel_NetworkClassLayout);
        Panel_NetworkClassLayout.setHorizontalGroup(
            Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_NetworkClassLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(Panel_NetworkClassLayout.createSequentialGroup()
                        .addComponent(RBtn_ClassA)
                        .addGap(8, 8, 8)
                        .addComponent(RBtn_ClassB)
                        .addGap(10, 10, 10)
                        .addComponent(RBtn_ClassC)))
                .addGroup(Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_NetworkClassLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(21, 21, 21))
                    .addGroup(Panel_NetworkClassLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(Label_PercentUse)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        Panel_NetworkClassLayout.setVerticalGroup(
            Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_NetworkClassLayout.createSequentialGroup()
                .addGroup(Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_NetworkClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBtn_ClassA)
                    .addComponent(RBtn_ClassB)
                    .addComponent(RBtn_ClassC)
                    .addComponent(Label_PercentUse, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("IP Address");

        Txt_IPAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Txt_IPAddressFocusLost(evt);
            }
        });
        Txt_IPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_IPAddressActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_IPAddressLayout = new javax.swing.GroupLayout(Panel_IPAddress);
        Panel_IPAddress.setLayout(Panel_IPAddressLayout);
        Panel_IPAddressLayout.setHorizontalGroup(
            Panel_IPAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_IPAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_IPAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(Txt_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        Panel_IPAddressLayout.setVerticalGroup(
            Panel_IPAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_IPAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Txt_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel3.setText("First Octet Range");

        Label_FirstOctetRange.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_FirstOctetRange.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout Panel_FirstOctetRangeLayout = new javax.swing.GroupLayout(Panel_FirstOctetRange);
        Panel_FirstOctetRange.setLayout(Panel_FirstOctetRangeLayout);
        Panel_FirstOctetRangeLayout.setHorizontalGroup(
            Panel_FirstOctetRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_FirstOctetRangeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_FirstOctetRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(Label_FirstOctetRange, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        Panel_FirstOctetRangeLayout.setVerticalGroup(
            Panel_FirstOctetRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_FirstOctetRangeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_FirstOctetRange, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("Hex IP Address");

        Label_HexIPAddress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_HexIPAddress.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(Label_HexIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_HexIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel5.setText("Subnet Mask");

        CBB_SubnetMask.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBB_SubnetMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBB_SubnetMaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SubnetMaskLayout = new javax.swing.GroupLayout(Panel_SubnetMask);
        Panel_SubnetMask.setLayout(Panel_SubnetMaskLayout);
        Panel_SubnetMaskLayout.setHorizontalGroup(
            Panel_SubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_SubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(CBB_SubnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Panel_SubnetMaskLayout.setVerticalGroup(
            Panel_SubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBB_SubnetMask, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel6.setText("Wildcard Mask");

        Label_WildcardMask.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_WildcardMask.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_WildcardMask, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Label_WildcardMask, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setText("Host Address Range");

        Label_HostAddressRange.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_HostAddressRange.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_HostAddressRange, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_HostAddressRange, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setText("Subnet Bits");

        CBB_SubnetBit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBB_SubnetBit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBB_SubnetBitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SubnetMask2Layout = new javax.swing.GroupLayout(Panel_SubnetMask2);
        Panel_SubnetMask2.setLayout(Panel_SubnetMask2Layout);
        Panel_SubnetMask2Layout.setHorizontalGroup(
            Panel_SubnetMask2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_SubnetMask2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(CBB_SubnetBit, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Panel_SubnetMask2Layout.setVerticalGroup(
            Panel_SubnetMask2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBB_SubnetBit, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel9.setText("Mask Bits");

        CBB_MaskBit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBB_MaskBit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBB_MaskBitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SubnetMask3Layout = new javax.swing.GroupLayout(Panel_SubnetMask3);
        Panel_SubnetMask3.setLayout(Panel_SubnetMask3Layout);
        Panel_SubnetMask3Layout.setHorizontalGroup(
            Panel_SubnetMask3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_SubnetMask3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(CBB_MaskBit, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_SubnetMask3Layout.setVerticalGroup(
            Panel_SubnetMask3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBB_MaskBit, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel10.setText("Maximum Subnets");

        CBB_MaximumSubnet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBB_MaximumSubnet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBB_MaximumSubnetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SubnetMask4Layout = new javax.swing.GroupLayout(Panel_SubnetMask4);
        Panel_SubnetMask4.setLayout(Panel_SubnetMask4Layout);
        Panel_SubnetMask4Layout.setHorizontalGroup(
            Panel_SubnetMask4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_SubnetMask4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(CBB_MaximumSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Panel_SubnetMask4Layout.setVerticalGroup(
            Panel_SubnetMask4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBB_MaximumSubnet, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel11.setText("Hosts Per Subnet");

        CBB_HostPerSubnet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBB_HostPerSubnet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBB_HostPerSubnetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_SubnetMask5Layout = new javax.swing.GroupLayout(Panel_SubnetMask5);
        Panel_SubnetMask5.setLayout(Panel_SubnetMask5Layout);
        Panel_SubnetMask5Layout.setHorizontalGroup(
            Panel_SubnetMask5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_SubnetMask5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(CBB_HostPerSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        Panel_SubnetMask5Layout.setVerticalGroup(
            Panel_SubnetMask5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SubnetMask5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBB_HostPerSubnet, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel15.setText("Subnet ID");

        Label_SubnetID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_SubnetID.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(Label_SubnetID, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Label_SubnetID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel16.setText("Broadcast Address");

        Label_BroadcastAddress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_BroadcastAddress.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_BroadcastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Label_BroadcastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel17.setText("Subnet Bitmap");

        Label_SubnetBitmap.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_SubnetBitmap.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_SubnetBitmap, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_SubnetBitmap, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Panel_BackGroundLayout = new javax.swing.GroupLayout(Panel_BackGround);
        Panel_BackGround.setLayout(Panel_BackGroundLayout);
        Panel_BackGroundLayout.setHorizontalGroup(
            Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                        .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                                .addComponent(Panel_SubnetMask4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Panel_SubnetMask5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel_BackGroundLayout.createSequentialGroup()
                                .addComponent(Panel_SubnetMask2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Panel_SubnetMask3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel_BackGroundLayout.createSequentialGroup()
                                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Panel_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Panel_SubnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Panel_NetworkClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Panel_FirstOctetRange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                        .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        Panel_BackGroundLayout.setVerticalGroup(
            Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(Panel_NetworkClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel_BackGroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Panel_FirstOctetRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Panel_SubnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_SubnetMask2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Panel_SubnetMask3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Panel_SubnetMask4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Panel_SubnetMask5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_BackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_BackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RBtn_ClassAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBtn_ClassAActionPerformed
        sc.setNetworkClass("A");
        sc.setIPAdress("10.0.0.1");
        setSelectRange();
        sc.setSubnetMask(CBB_SubnetMask.getSelectedItem().toString());
        syncData();
        setShowData();
    }//GEN-LAST:event_RBtn_ClassAActionPerformed

    private void RBtn_ClassBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBtn_ClassBActionPerformed
        sc.setNetworkClass("B");
        sc.setIPAdress("172.16.0.1");
        setSelectRange();
        sc.setSubnetMask(CBB_SubnetMask.getSelectedItem().toString());
        syncData();
        setShowData();
    }//GEN-LAST:event_RBtn_ClassBActionPerformed

    private void RBtn_ClassCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBtn_ClassCActionPerformed
        sc.setNetworkClass("C");
        sc.setIPAdress("192.168.0.1");
        setSelectRange();
        sc.setSubnetMask(CBB_SubnetMask.getSelectedItem().toString());
        syncData();
        setShowData();
    }//GEN-LAST:event_RBtn_ClassCActionPerformed

    private void Txt_IPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_IPAddressActionPerformed
        sc.setIPAdress(Txt_IPAddress.getText());
        setShowData();
    }//GEN-LAST:event_Txt_IPAddressActionPerformed

    private void Txt_IPAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Txt_IPAddressFocusLost
        sc.setIPAdress(Txt_IPAddress.getText());
        setShowData();
    }//GEN-LAST:event_Txt_IPAddressFocusLost

    private void CBB_SubnetMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBB_SubnetMaskActionPerformed
        sc.setSubnetMask(CBB_SubnetMask.getSelectedItem().toString());
        syncData();
        setSelectData();
        setShowData();
    }//GEN-LAST:event_CBB_SubnetMaskActionPerformed

    private void CBB_SubnetBitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBB_SubnetBitActionPerformed
        sc.setSubnetBit(Integer.parseInt(CBB_SubnetBit.getSelectedItem().toString()));
        sc.syncSubnetMask("SubnetBit");
        syncData();
        setSelectData();
        setShowData();
    }//GEN-LAST:event_CBB_SubnetBitActionPerformed

    private void CBB_MaskBitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBB_MaskBitActionPerformed
        sc.setMaskBit(Integer.parseInt(CBB_MaskBit.getSelectedItem().toString()));
        sc.syncSubnetMask("MaskBit");
        syncData();
        setSelectData();
        setShowData();
    }//GEN-LAST:event_CBB_MaskBitActionPerformed

    private void CBB_MaximumSubnetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBB_MaximumSubnetActionPerformed
        sc.setMaximumSubnet(Integer.parseInt(CBB_MaximumSubnet.getSelectedItem().toString()));
        sc.syncSubnetMask("MaximumSubnet");
        syncData();
        setSelectData();
        setShowData();
    }//GEN-LAST:event_CBB_MaximumSubnetActionPerformed

    private void CBB_HostPerSubnetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBB_HostPerSubnetActionPerformed
        sc.setHostPerSubnet(Integer.parseInt(CBB_HostPerSubnet.getSelectedItem().toString()));
        sc.syncSubnetMask("HostPerSubnet");
        syncData();
        setSelectData();
        setShowData();
    }//GEN-LAST:event_CBB_HostPerSubnetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SNCalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SNCalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SNCalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SNCalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SNCalFrame().setVisible(true);
            }
        });
    }
    
    public void setRangeSubnetMask() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(sc.getNetworkClass().equals("A")) {
            StringBuilder subnetMaskBit = new StringBuilder("11111111000000000000000000000000");
            String toDecimal = "";
            for(int i=0; i<=24; i+=8) {
                toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(i, i+8)) + ".";
            }
            model.addElement(toDecimal.substring(0, toDecimal.length()-1));
            
            for(int i=8; i<subnetMaskBit.length()-2; i++) {
                if(subnetMaskBit.charAt(i) != '1') {
                    subnetMaskBit.setCharAt(i,'1');
                    toDecimal = "";
                    for(int j=0; j<=24; j+=8) {
                        toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(j, j+8)) + ".";
                    }
                    model.addElement(toDecimal.substring(0, toDecimal.length()-1));
                }
            }            
        } else if (sc.getNetworkClass().equals("B")) {
            StringBuilder subnetMaskBit = new StringBuilder("11111111111111110000000000000000");
            String toDecimal = "";
            for(int i=0; i<=24; i+=8) {
                toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(i, i+8)) + ".";
            }
            model.addElement(toDecimal.substring(0, toDecimal.length()-1));
            
            for(int i=16; i<subnetMaskBit.length()-2; i++) {
                if(subnetMaskBit.charAt(i) != '1') {
                    subnetMaskBit.setCharAt(i,'1');
                    toDecimal = "";
                    for(int j=0; j<=24; j+=8) {
                        toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(j, j+8)) + ".";
                    }
                    model.addElement(toDecimal.substring(0, toDecimal.length()-1));
                }
            }
        } else {
            StringBuilder subnetMaskBit = new StringBuilder("11111111111111111111111100000000");
            String toDecimal = "";
            for(int i=0; i<=24; i+=8) {
                toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(i, i+8)) + ".";
            }
            model.addElement(toDecimal.substring(0, toDecimal.length()-1));
            
            for(int i=24; i<subnetMaskBit.length()-2; i++) {
                if(subnetMaskBit.charAt(i) != '1') {
                    subnetMaskBit.setCharAt(i,'1');
                    toDecimal = "";
                    for(int j=0; j<=24; j+=8) {
                        toDecimal += sc.convertBitToDecimal(subnetMaskBit.substring(j, j+8)) + ".";
                    }
                    model.addElement(toDecimal.substring(0, toDecimal.length()-1));
                }
            }
        }
        CBB_SubnetMask.setModel(model);
    }
    
    public void setRangeSubnetBit() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(sc.getNetworkClass().equals("A")) {
            for(int i=0; i<=22; i++) {
                model.addElement(i);
            }
        } else if (sc.getNetworkClass().equals("B")) {
            for(int i=0; i<=14; i++) {
                model.addElement(i);
            }
        } else {
            for(int i=0; i<=6; i++) {
                model.addElement(i);
            }
        }
        CBB_SubnetBit.setModel(model);
    }
    
    public void setRangeMaskBit() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(sc.getNetworkClass().equals("A")) {
            for(int i=8; i<=30; i++) {
                model.addElement(i);
            }
        } else if (sc.getNetworkClass().equals("B")) {
            for(int i=16; i<=30; i++) {
                model.addElement(i);
            }
        } else {
            for(int i=24; i<=30; i++) {
                model.addElement(i);
            }
        }
        CBB_MaskBit.setModel(model);
    }
    
    public void setRangeMaximumSubnet() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(sc.getNetworkClass().equals("A")) {
            for(int i=0; i<=22; i++) {
                model.addElement((int) Math.pow(2, i));
            }
        } else if (sc.getNetworkClass().equals("B")) {
            for(int i=0; i<=14; i++) {
                model.addElement((int) Math.pow(2, i));
            }
        } else {
            for(int i=0; i<=6; i++) {
                model.addElement((int) Math.pow(2, i));
            }
        }
        CBB_MaximumSubnet.setModel(model);
    }
    
    public void setRangeHostPerSubnet() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(sc.getNetworkClass().equals("A")) {
            for(int i=24; i>=2; i--) {
                model.addElement((int) Math.pow(2, i)-2);
            }
        } else if (sc.getNetworkClass().equals("B")) {
            for(int i=16; i>=2; i--) {
                model.addElement((int) Math.pow(2, i)-2);
            }
        } else {
            for(int i=8; i>=2; i--) {
                model.addElement((int) Math.pow(2, i)-2);
            }
        }
        CBB_HostPerSubnet.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BG_NetworkClass;
    private javax.swing.JComboBox<String> CBB_HostPerSubnet;
    private javax.swing.JComboBox<String> CBB_MaskBit;
    private javax.swing.JComboBox<String> CBB_MaximumSubnet;
    private javax.swing.JComboBox<String> CBB_SubnetBit;
    private javax.swing.JComboBox<String> CBB_SubnetMask;
    private javax.swing.JLabel Label_BroadcastAddress;
    private javax.swing.JLabel Label_FirstOctetRange;
    private javax.swing.JLabel Label_HexIPAddress;
    private javax.swing.JLabel Label_HostAddressRange;
    private javax.swing.JLabel Label_PercentUse;
    private javax.swing.JLabel Label_SubnetBitmap;
    private javax.swing.JLabel Label_SubnetID;
    private javax.swing.JLabel Label_WildcardMask;
    private javax.swing.JPanel Panel_BackGround;
    private javax.swing.JPanel Panel_FirstOctetRange;
    private javax.swing.JPanel Panel_IPAddress;
    private javax.swing.JPanel Panel_NetworkClass;
    private javax.swing.JPanel Panel_SubnetMask;
    private javax.swing.JPanel Panel_SubnetMask2;
    private javax.swing.JPanel Panel_SubnetMask3;
    private javax.swing.JPanel Panel_SubnetMask4;
    private javax.swing.JPanel Panel_SubnetMask5;
    private javax.swing.JRadioButton RBtn_ClassA;
    private javax.swing.JRadioButton RBtn_ClassB;
    private javax.swing.JRadioButton RBtn_ClassC;
    private javax.swing.JTextField Txt_IPAddress;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables
}
