/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_db;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import com.toedter.calendar.JTextFieldDateEditor;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author user
 */
public class PayForm extends javax.swing.JFrame {
    private static PayForm inserframe = new PayForm();
    private static PayForm updateframe = new PayForm();
    private static boolean updateFlag = false;
    private static String updateID;
    private static Date odate ;
    private static String oname ;
    DefaultComboBoxModel cbModel = new DefaultComboBoxModel();

    /**
     * Creates new form TimeworkEmpForm
     */
    public void setUpdateForm(String empID,Date date,String empName) {
        updateframe.setSelectedComponent();
        System.out.println(empName);
        JTextFieldDateEditor editor = (JTextFieldDateEditor) updateframe.Fdate.getDateEditor();
        editor.setEditable(false);
        updateframe.titleLabel.setText("แก้ไขข้อมูลจ่ายเงินพนักงาน");
        updateframe.Fdate.setDate(date);
        odate = date;
        updateframe.employeeCbb.setSelectedItem(empName);
        oname = empName;
        updateframe.setVisible(true);
    }
    public PayForm() {
        initComponents();
    }
    public void setupdateFlag(boolean value)
    {
        updateframe.updateFlag = value;
    }
     public void openinserFrame() {
        //empF.showDataRecord();
        inserframe.setSelectedComponent();
        JTextFieldDateEditor editor = (JTextFieldDateEditor) inserframe.Fdate.getDateEditor();
        editor.setEditable(false);
        
        inserframe.setVisible(true);
       

     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Fdate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        employeeCbb = new javax.swing.JComboBox<>();
        submitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(241, 169, 160));

        titleLabel.setFont(new java.awt.Font("TH SarabunPSK", 1, 36)); // NOI18N
        titleLabel.setText("เพิ่มข้อมูลจ่ายเงินพนักงาน");

        jLabel2.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel2.setText(" *วันที่เข้าทำงาน\t");

        Fdate.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        Fdate.setMaxSelectableDate(new java.util.Date(253370743290000L));
        Date date = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        c.set(Calendar.YEAR, 2017);
        Fdate.setDate(c.getTime());

        jLabel1.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel1.setText("*พนักงาน");

        employeeCbb.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        employeeCbb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        submitButton.setBackground(new java.awt.Color(236, 240, 241));
        submitButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        submitButton.setText("บันทึก");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeCbb, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(Fdate, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel))
                .addGap(88, 88, 88))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(titleLabel)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Fdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeCbb, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
         PayTable PT = new PayTable();
        if(updateFlag) {
            editData();
           // TET.callEnableButtonCheck();
        }
        else {
            insertData();
           // TET.enableButtonCheck();
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    public void editData() {
        
        
        Date date = Fdate.getDate();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String FDate = df.format(date); //แปลงคำสั่งจากdate เป็น staing
        String Olxdate = df.format(odate);
        String stringcut = FDate.substring(FDate.length()-2, FDate.length());
        String EmpName = employeeCbb.getSelectedItem().toString();
        String[] splitName = EmpName.split(" ");
        String[] splitOlxName = oname.split(" ");
        String moneyToGiveTW = "0";
        String moneyToGiveOT = "0";
        
        if(stringcut.equals("05"))
            {
            String sql = "select sum(TW_DURATION) * EMP_CHG_HOUR from time_work natural join employee" + 
                          " where TW_DATE >= (SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH))" +
                          " and year(TW_DATE) = year((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                          " and month(TW_DATE) = month((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                          " and EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" +
                          splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveTW = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                
                sql = "select sum(OT_DURATION) * EMP_CHG_HOUR from over_time natural join employee" + 
                      " where OT_DATE >= (SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH))" +
                      " and year(OT_DATE) = year((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                      " and month(OT_DATE) = month((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                      " and EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + 
                        splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveOT = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
         sql = "UPDATE PAY_SALARY " + 
                     "SET PAY_DATE = '" + FDate + "'"+", PAY_MONTH_COST = " + moneyToGiveTW +", PAY_OT_COST = "+moneyToGiveOT+
                     ", EMP_ID = (select EMP_ID from employee where " +
                     "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')" + 
                     " where EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitOlxName[0] + 
                     "' and EMP_LNAME = '" + splitOlxName[1]+"') AND PAY_DATE = '" +Olxdate +"'";
        System.out.println(sql);
        
        try {
                Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                stmt.executeUpdate(sql);
            } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
            }
        PayTable PT = new PayTable();
        PT.callClearRow();
        PT.callShowDataRecord();
        JOptionPane.showMessageDialog(null, "แก้ไขข้อมูลเรียบร้อยแล้ว");
        PT.callEnableButtonCheck();
        
        updateframe.dispose();
        }
        else
         {
                String sql = "select sum(TW_DURATION) * EMP_CHG_HOUR from time_work natural join employee"+ 
                       " where TW_DATE <= (SELECT DATE_ADD('"+FDate+"', INTERVAL -5 DAY))"+
                       " and year(TW_DATE) = year('"+FDate+"') and month(TW_DATE) = month('"+FDate+"')"+
                       " and EMP_ID = (select EMP_ID from employee where" +
                       " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveTW = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                
                sql = "select sum(OT_DURATION) * EMP_CHG_HOUR from over_time natural join employee"+
                       " where OT_DATE <= (SELECT DATE_ADD('"+FDate+"', INTERVAL -5 DAY))"+
                       " and year(OT_DATE) = year('"+FDate+"') and month(OT_DATE) = month('"+FDate+"')"+
                       " and EMP_ID = (select EMP_ID from employee where" +
                       " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveOT = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                sql = "UPDATE PAY_SALARY " + 
                     "SET PAY_DATE = '" + FDate + "'"+", PAY_MONTH_COST = " + moneyToGiveTW +", PAY_OT_COST = "+moneyToGiveOT+
                     ", EMP_ID = (select EMP_ID from employee where " +
                     "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')" + 
                     " where EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitOlxName[0] + 
                     "' and EMP_LNAME = '" + splitOlxName[1]+"') AND PAY_DATE = '" +Olxdate +"'";
                System.out.println(sql);
                  try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate(sql);
                } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
            PayTable PT = new PayTable();
            PT.callClearRow();
            PT.callShowDataRecord();
            JOptionPane.showMessageDialog(null, "แก้ไขข้อมูลเรียบร้อยแล้ว");
            updateframe.dispose();
      }
                     
        
    }
    /**
     * @param args the command line arguments
     */
    private void setSelectedComponent() {
        String sql = "select EMP_FNAME, EMP_LNAME from employee";
            try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                cbModel.addElement(rs.getString(1) + " " + rs.getString(2));
            }
            
            } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
            }
        employeeCbb.setModel(cbModel);
    }
    public void insertData() {
            
            Date date = Fdate.getDate();
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); // ต้องมีรูปแบบ
            String FDate = df.format(date); //แปลงคำสั่งจากdate เป็น staing
            String stringcut = FDate.substring(FDate.length()-2, FDate.length());
            String EmpName = employeeCbb.getSelectedItem().toString();
            String[] splitName = EmpName.split(" ");
            String moneyToGiveTW = "0";
            String moneyToGiveOT = "0";
            
            
            
            if(stringcut.equals("05"))
            {
            String sql = "select sum(TW_DURATION) * EMP_CHG_HOUR from time_work natural join employee" + 
                          " where TW_DATE >= (SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH))" +
                          " and year(TW_DATE) = year((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                          " and month(TW_DATE) = month((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                          " and EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveTW = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                
                sql = "select sum(OT_DURATION) * EMP_CHG_HOUR from over_time natural join employee" + 
                      " where OT_DATE >= (SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH))" +
                      " and year(OT_DATE) = year((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                      " and month(OT_DATE) = month((SELECT DATE_ADD(DATE_ADD('"+FDate+"', INTERVAL 11 DAY), INTERVAL -1 MONTH)))" +
                      " and EMP_ID = (select EMP_ID from employee where " + "EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveOT = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                
            sql = "INSERT INTO PAY_SALARY(EMP_ID, PAY_DATE, PAY_MONTH_COST, PAY_OT_COST)"+
                  " VALUES((select EMP_ID from employee where" +
                  " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"'), '"+ FDate +"'," 
                  + moneyToGiveTW + ", " + moneyToGiveOT + ")";
                          
            System.out.println(sql);
                  try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate(sql);
                } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
            PayTable PT = new PayTable();
            PT.callClearRow();
            PT.callShowDataRecord();
            JOptionPane.showMessageDialog(null, "เพิ่มข้อมูลเรียบร้อยแล้ว");
            }
        else
         {
                String sql = "select sum(TW_DURATION) * EMP_CHG_HOUR from time_work natural join employee"+ 
                       " where TW_DATE <= (SELECT DATE_ADD('"+FDate+"', INTERVAL -5 DAY))"+
                       " and year(TW_DATE) = year('"+FDate+"') and month(TW_DATE) = month('"+FDate+"')"+
                       " and EMP_ID = (select EMP_ID from employee where" +
                       " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveTW = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
                
                sql = "select sum(OT_DURATION) * EMP_CHG_HOUR from over_time natural join employee"+
                       " where OT_DATE <= (SELECT DATE_ADD('"+FDate+"', INTERVAL -5 DAY))"+
                       " and year(OT_DATE) = year('"+FDate+"') and month(OT_DATE) = month('"+FDate+"')"+
                       " and EMP_ID = (select EMP_ID from employee where" +
                       " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"')";    
                try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    
                    while(rs.next())
                        if (rs.getString(1) != null)
                            moneyToGiveOT = rs.getString(1);
                } 
                
                catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
             
                 sql = "INSERT INTO PAY_SALARY(EMP_ID,PAY_DATE,PAY_MONTH_COST,PAY_OT_COST)\n"+
                       "VALUES((select EMP_ID from employee where" +
                       " EMP_FNAME = '" + splitName[0] + "' and EMP_LNAME = '" + splitName[1]+"'), '"+ FDate +"'," 
                       + moneyToGiveTW + "," + moneyToGiveOT + ")";
                          
                          
            System.out.println(sql);
                  try {
                    Connection conn = Gui_db.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate(sql);
                } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                }
            PayTable PT = new PayTable();
            PT.callClearRow();
            PT.callShowDataRecord();
            JOptionPane.showMessageDialog(null, "เพิ่มข้อมูลเรียบร้อยแล้ว");
      }
            
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser Fdate;
    private javax.swing.JComboBox<String> employeeCbb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
