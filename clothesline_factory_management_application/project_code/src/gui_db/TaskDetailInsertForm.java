/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_db;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author KAZDO
 */
public class TaskDetailInsertForm extends javax.swing.JFrame {
    private static TaskDetailInsertForm INSERT_FRAME = new TaskDetailInsertForm();
    private static String deliveryId, deliTaskId, deliDate;
    /**
     * Creates new form OrderProductForm
     */
    public TaskDetailInsertForm() {
        initComponents();
    }
        
    public void setInsertForm(String allOrderInTable) {
        setSelectedComponent(allOrderInTable);
        INSERT_FRAME.setMustSend();
        INSERT_FRAME.setEmptyBlock();
        INSERT_FRAME.setVisible(true);
    }
    
    public void setIdAndDate(String deliId, String dId, String date) {
        deliveryId = deliId;
        deliTaskId = dId;
        deliDate = date;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        takeIntext = new javax.swing.JTextField();
        orderMustSendCbb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        mustDeliLabel = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        emptyBoxLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(144, 198, 149));

        jLabel3.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel3.setText("วางจำนวนสินค้า");

        takeIntext.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N

        orderMustSendCbb.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        orderMustSendCbb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        orderMustSendCbb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderMustSendCbbActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel1.setText("ออเดอร์สินค้าส่งวันนี้");

        jLabel5.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel5.setText("จำนวนสินค้าที่ต้องส่ง:");

        mustDeliLabel.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        mustDeliLabel.setText("0");

        submitBtn.setBackground(new java.awt.Color(236, 240, 241));
        submitBtn.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        submitBtn.setText("นำเข้ารอบ");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        jLabel2.setText("จำนวนที่ว่างในรอบการขนส่ง:");

        emptyBoxLabel.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        emptyBoxLabel.setText("450");

        titleLabel.setFont(new java.awt.Font("TH SarabunPSK", 1, 36)); // NOI18N
        titleLabel.setText("เพิ่มออเดอร์ในรอบการส่งสินค้า");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(176, 176, 176))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(orderMustSendCbb, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(emptyBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5)
                                    .addComponent(takeIntext, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mustDeliLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emptyBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(orderMustSendCbb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(mustDeliLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(takeIntext, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        DeliveryTable DT = new DeliveryTable();
        insertData();
        DT.callEnableButtonCheck();
    }//GEN-LAST:event_submitBtnActionPerformed

    private void orderMustSendCbbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderMustSendCbbActionPerformed
        INSERT_FRAME.setMustSend();
    }//GEN-LAST:event_orderMustSendCbbActionPerformed
    
    public void insertData() {
        if(isNumeric(INSERT_FRAME.takeIntext.getText())) {
            int emptyArea = Integer.parseInt(INSERT_FRAME.emptyBoxLabel.getText());
            int mustDelivery = Integer.parseInt(INSERT_FRAME.mustDeliLabel.getText());
            int takeInAmount = Integer.parseInt(INSERT_FRAME.takeIntext.getText());
            String totalAmount = "";
            if(mustDelivery - takeInAmount < 0) {
                JOptionPane.showMessageDialog(null, "การเพิ่มข้อมูลล้มเหลวเนื่องจากวางจำนวนสินค้าเกินจำนวนที่ขาดส่งในออเดอร์");
            } else if(emptyArea - takeInAmount < 0) {
                JOptionPane.showMessageDialog(null, "การเพิ่มข้อมูลล้มเหลวเนื่องจากวางจำนวนสินค้าเกินจำนวนที่ว่างเหลือในรอบการขนส่ง");
            } else {
                String productOrderId = INSERT_FRAME.orderMustSendCbb.getSelectedItem().toString();
                String instanceId = "";
                String sql = "select INSTANCE_ID, INSTANCE_TOTAL_AMOUNT from instance where PORDER_ID = " + productOrderId
                           + " and INSTANCE_DELI_DATE = '" + deliDate + "'";
                System.out.println(sql);
                try (
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql)){
                        while(rs.next()) {
                            totalAmount = rs.getString(2);
                            instanceId = rs.getString(1);
                        }
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                
                
                sql = "insert into task_detail(INSTANCE_ID, DTASK_ID, TD_AMOUNT)"
                    + " values("+ instanceId +", " + deliTaskId + ", " + takeInAmount + ") ";
                    try {
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        stmt.executeUpdate(sql);
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                    
                String query = "{ call update_deli_task_amount(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliTaskId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                query = "{ call update_delivery_amount_cost(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliveryId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
            try (Connection conn = Gui_db.getConnection();    
            CallableStatement cs = conn.prepareCall("{call get_prodId_to_reduce(?)}")) {
            cs.setString(1, instanceId);
            ResultSet rs = cs.executeQuery();
            while(rs.next()) {
                CallableStatement cs2 = conn.prepareCall("{ call update_product_amount(?,?) }");
                cs2.setString(1, rs.getString("PROD_ID"));
                cs2.setString(2, "-"+rs.getString("INDE_AMOUNT"));
                cs2.executeQuery();
            }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            
                TaskDetailTable tdt = new TaskDetailTable();
                tdt.callsetEmptyBlock();
                tdt.callClearRow();
                tdt.callShowDataRecord();
                INSERT_FRAME.setSelectedComponent(tdt.callGetAllOrder());
                INSERT_FRAME.setMustSend();
                INSERT_FRAME.setEmptyBlock();
                clearTextBox();
                JOptionPane.showMessageDialog(null, "เพิ่มข้อมูลเรียบร้อยแล้ว");
            }
        } else {
            JOptionPane.showMessageDialog(null, "กรุณาใส่จำนวนให้ถูกต้อง");
        }
    }
    
    public void setSelectedComponent(String allOrderInTable) {
        DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
        String sql = "select PORDER_ID, INSTANCE_TOTAL_AMOUNT from instance"
                   + " where INSTANCE_DELI_DATE = '" + deliDate + "'"
                   + " and PORDER_ID not in (" + checkSelectedOrder(allOrderInTable) + ")";
        try (Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {

        while (rs.next()) {
            if(rs.getString(1) != null) {
                
                String sql2 = "select sum(TD_AMOUNT) from task_detail natural join instance where"
                            + " PORDER_ID = "+ rs.getString(1) + " and INSTANCE_DELI_DATE = '" + deliDate + "'";

                    try (Statement stmt2 = conn.createStatement();
                        ResultSet rs2 = stmt2.executeQuery(sql2)) {
                        while(rs2.next()) {
                            
                            if(rs2.getString(1) != null) {
                                
                                if(Integer.parseInt(rs.getString(2)) - Integer.parseInt(rs2.getString(1)) > 0) {
                                    cbModel.addElement(rs.getString(1));
                                }
                            }
                            else {
                                cbModel.addElement(rs.getString(1));
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(TaskDetailTable.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }

        }
        } catch (SQLException ex) {
                System.out.println(ex.getMessage());
        }

        if(cbModel.getSize() == 0) {
            INSERT_FRAME.setVisible(false);
            new TaskDetailTable().setInsertButton(false);
        }

        else {
            new TaskDetailTable().setInsertButton(true);
            INSERT_FRAME.orderMustSendCbb.setModel(cbModel);
            INSERT_FRAME.orderMustSendCbb.setSelectedIndex(0);
        }        
    }
    
    public void setMustSend() {
        boolean notInsert = true;
        String orderMustSend = INSERT_FRAME.orderMustSendCbb.getSelectedItem().toString();
        String sql = "select INSTANCE_TOTAL_AMOUNT - sum(TD_AMOUNT)"
                   + " from instance natural join task_detail "
                   + " where PORDER_ID = "+ orderMustSend 
                   + " and INSTANCE_DELI_DATE = '" + deliDate + "'"
                   + " group by INSTANCE_ID";
        
        try (Connection conn = Gui_db.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql)) {
            while(rs.next()) {
                String str = rs.getString(1);
                if (str != null | str.length() != 0) {
                    notInsert = false;
                    INSERT_FRAME.mustDeliLabel.setText(rs.getString(1));
                }
            }
        } catch (SQLException ex) {
           System.out.println(ex);
        }
                
        if(notInsert) {
            sql = "select INSTANCE_TOTAL_AMOUNT from instance"
                + " where PORDER_ID = " + orderMustSend
                + " and INSTANCE_DELI_DATE = '" + deliDate + "'";
            try (Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {
                while(rs.next()) {
                        INSERT_FRAME.mustDeliLabel.setText(rs.getString(1));
                    }
            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
    }
    
    public String checkSelectedOrder(String order) {
        String sql = "select distinct INSTANCE_ID, INSTANCE_TOTAL_AMOUNT"
                   + " from instance natural join task_detail"
                   + " where DTASK_ID = " + deliTaskId;
        try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
                    while(rs.next()) {
                        sql = "select PORDER_ID from instance natural join task_detail"
                            + " where INSTANCE_ID = " + rs.getString(1) 
                            + " and " + rs.getString(2) + " = (select sum(TD_AMOUNT) from deli_task"
                            + " where INSTANCE_ID = " + rs.getString(1) + ")";
                        try (
                        Statement stmt2 = conn.createStatement();
                        ResultSet rs2 = stmt2.executeQuery(sql)) {
                            while(rs2.next()) {
                                String str = rs.getString(1);
                                if (str != null | str.length() != 0)
                                    order.replace(rs2.getString(1), "");
                            }
                       } catch (SQLException ex) {
                           System.out.println(ex);
                       } 
                        
                    }
               } catch (SQLException ex) {
                   System.out.println(ex);
               }
        return order;
    }
        
    public void clearTextBox() {
       INSERT_FRAME.takeIntext.setText("");
    }
    
    public void setEmptyBlock() {
        String sql = "select DTASK_AMOUNT from deli_task where DTASK_ID = " + deliTaskId;
        int total = 450;
        try (Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {
                while(rs.next()) {  
                    total -= Integer.parseInt(rs.getString(1));
                }
            INSERT_FRAME.emptyBoxLabel.setText("" + total);
        } catch (SQLException ex) {
            Logger.getLogger(TaskDetailTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emptyBoxLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mustDeliLabel;
    private javax.swing.JComboBox<String> orderMustSendCbb;
    private javax.swing.JButton submitBtn;
    private javax.swing.JTextField takeIntext;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
