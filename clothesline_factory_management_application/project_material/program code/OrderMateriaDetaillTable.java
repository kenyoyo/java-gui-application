/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_db;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author KAZDO
 */
public class OrderMateriaDetaillTable extends javax.swing.JFrame {

    private static OrderMateriaDetaillTable OMDT_FRAME = new OrderMateriaDetaillTable();
    private static String mor_id = "";
    private String empName = "";
    private DefaultTableModel model = new DefaultTableModel();
    private Object[] data = new Object[0];
    TextAreaRenderer textAreaRenderer = new TextAreaRenderer();
    TextAreaEditor textAreaEditor = new TextAreaEditor();

    private static String getMatName = "";
    private static String getVName = "";

    public OrderMateriaDetaillTable() {
        initComponents();
        setTabel();

    }

    public void setTabel() {
        // BtnInsert.setEnabled(true);

        model = (DefaultTableModel) orderMaterialTable.getModel();

        TableColumnModel cmodel = orderMaterialTable.getColumnModel();
        for (int i = 1; i < 6; i++) {
            cmodel.getColumn(i).setCellRenderer(textAreaRenderer);
            cmodel.getColumn(i).setCellEditor(textAreaEditor);
        }

    }

    public void openFrame() {

        OMDT_FRAME.clearRow();
        OMDT_FRAME.showDataRecord();
        new OrderMaterialDetailForm().setMatName(getMatName(), selectP_ID());
        OMDT_FRAME.enableButtonCheck();
        OMDT_FRAME.setVisible(true);
    }

    public void setMorID(String id) {
        mor_id = id;
        OMDT_FRAME.mor_idTxt.setText(mor_id);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        checkAllButton = new javax.swing.JButton();
        MainMenuButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mor_idTxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderMaterialTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        poInsertButton = new javax.swing.JButton();
        poEditButton = new javax.swing.JButton();
        poDeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(210, 82, 127));

        checkAllButton.setBackground(new java.awt.Color(44, 62, 80));
        checkAllButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        checkAllButton.setForeground(new java.awt.Color(255, 255, 255));
        checkAllButton.setText("เลือกทั้งหมด");
        checkAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllButtonActionPerformed(evt);
            }
        });

        MainMenuButton.setBackground(new java.awt.Color(236, 240, 241));
        MainMenuButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        MainMenuButton.setText("เมนูหลัก");
        MainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(236, 240, 241));
        backButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        backButton.setText("ย้อนกลับ");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("TH SarabunPSK", 1, 36)); // NOI18N
        jLabel1.setText("รายละเอียดออเดอร์วัสดุ");

        jLabel2.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        jLabel2.setText("หมายเลขวัสดุที่");

        mor_idTxt.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        mor_idTxt.setText("jLabel3");

        orderMaterialTable.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        orderMaterialTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "เลือก", "ลำดับ", "ชื่อวัสดุ", "ชื่อบริษัทผู้ขาย", "วันที่ได้รับวัสดุ", "จำนวนที่สั่ง"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderMaterialTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        orderMaterialTable.getTableHeader().setReorderingAllowed(false);
        orderMaterialTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderMaterialTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(orderMaterialTable);
        if (orderMaterialTable.getColumnModel().getColumnCount() > 0) {
            orderMaterialTable.getColumnModel().getColumn(0).setResizable(false);
            orderMaterialTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            orderMaterialTable.getColumnModel().getColumn(1).setResizable(false);
            orderMaterialTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            orderMaterialTable.getColumnModel().getColumn(2).setResizable(false);
            orderMaterialTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            orderMaterialTable.getColumnModel().getColumn(3).setResizable(false);
            orderMaterialTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            orderMaterialTable.getColumnModel().getColumn(4).setResizable(false);
            orderMaterialTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            orderMaterialTable.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel1.setBackground(new java.awt.Color(210, 82, 127));

        poInsertButton.setBackground(new java.awt.Color(236, 240, 241));
        poInsertButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        poInsertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui_db/add (1).png"))); // NOI18N
        poInsertButton.setText("เพิ่ม");
        poInsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poInsertButtonActionPerformed(evt);
            }
        });

        poEditButton.setBackground(new java.awt.Color(236, 240, 241));
        poEditButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        poEditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui_db/tools.png"))); // NOI18N
        poEditButton.setText("แก้ไข");
        poEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poEditButtonActionPerformed(evt);
            }
        });

        poDeleteButton.setBackground(new java.awt.Color(236, 240, 241));
        poDeleteButton.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        poDeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui_db/delete (1).png"))); // NOI18N
        poDeleteButton.setText("ลบ");
        poDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(poInsertButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(poEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(poDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(poInsertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(poEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(poDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(346, 346, 346)
                                .addComponent(jLabel1))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(checkAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(464, 464, 464)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(mor_idTxt)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(checkAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mor_idTxt)
                    .addComponent(jLabel2))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void poInsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poInsertButtonActionPerformed
        OrderMaterialDetailForm OMDF = new OrderMaterialDetailForm();
        OMDF.setUpdateFlag(false);

        OMDF.setMatName(getMatName(), selectP_ID());

        //OF.getMat_NameToCBB();
        OMDF.setMor_ID(mor_id);
        OMDF.openInsertFrame();

    }//GEN-LAST:event_poInsertButtonActionPerformed

    public String selectP_ID() {

        String sql = "select P_ID from produce natural join vendor natural join material where "
                + "mat_name in(" + getMatName() + ") and v_name in(" + getVName() + ");";

        String P_ID = "";
        try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {

                P_ID += rs.getString(1) + ", ";

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        if (P_ID.equals("")) {
            return "''";
        }

        return P_ID.substring(0, P_ID.length() - 2);

    }

    public String selectP_IDtoDel() {
        String P_ID = "";
        String sql = "select P_ID from produce natural join vendor natural join material where "
                + "mat_name in(" + getMatNameToDel() + ") and v_name in(" + getVNameToDel() + ");";

        try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {

                P_ID += rs.getString(1) + ", ";

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return P_ID.substring(0, P_ID.length() - 2);

    }

    public String selectP_IDedit() {

        String sql = "select P_ID from produce natural join vendor natural join material where "
                + "mat_name in(" + getMatNameEdit() + ") and v_name in(" + getVNameEdit() + ");";
        
        String P_ID = "";
        try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {

                P_ID += rs.getString(1);

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }


        return P_ID;

    }
    
    private void poDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poDeleteButtonActionPerformed
        String checkRow = getCheckRow();
        String[] s = checkRow.split(", ");
        checkRow = checkRow.substring(0, checkRow.length() - 2);
        int reply = JOptionPane.showConfirmDialog(null, "ลบข้อมูลทั้งหมดจำนวน " + s.length + " แถว?",
                "แจ้งเตือน", JOptionPane.YES_NO_OPTION);
        String sql = "delete MAT_ORDER_DETAIL from MAT_ORDER_DETAIL where P_ID in(" + selectP_IDtoDel() + ") and mor_id = " + mor_id + ";";

        //System.out.println(sql);

        try {
            Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        clearRow();
        showDataRecord();
        enableButtonCheck();
        JOptionPane.showMessageDialog(this, "ลบข้อมูลเรียบร้อย");
        OMDT_FRAME.poInsertButton.setEnabled(true);


    }//GEN-LAST:event_poDeleteButtonActionPerformed

    private void poEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poEditButtonActionPerformed

        OrderMaterialDetailForm OMDF = new OrderMaterialDetailForm();

        try {
            OMDF.setUpdateForm(getMatNameToUpdate(), getVnameToUpdate(), getDateToUpdate(), getAmountToUpdate());
            
            
            OMDF.setUpdateFlag(true);
           
            //System.out.println(getMatNameEdit());
            //System.out.println(getVNameEdit());
            //System.out.println(selectP_IDedit());
            
            OMDF.setMatNameEDIT(getMatNameEdit(), selectP_IDedit());
            
            
            
            OMDF.setMor_ID(mor_id);
        } catch (ParseException ex) {
            Logger.getLogger(OrderMateriaDetaillTable.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_poEditButtonActionPerformed

    private void orderMaterialTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderMaterialTableMouseClicked
        enableButtonCheck();
    }//GEN-LAST:event_orderMaterialTableMouseClicked

    private void MainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuButtonActionPerformed
        new MainFrame().setVisible(true);
        OMDT_FRAME.dispose();
    }//GEN-LAST:event_MainMenuButtonActionPerformed

    private void checkAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllButtonActionPerformed
        if (checkAllButton.getText().equals("เลือกทั้งหมด")) {
            for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
                model.setValueAt(true, i, 0);
            }
            checkAllButton.setText("ยกเลิกการเลือก");
        } else {
            for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
                model.setValueAt(false, i, 0);
            }
            checkAllButton.setText("เลือกทั้งหมด");
        }

        enableButtonCheck();
    }//GEN-LAST:event_checkAllButtonActionPerformed


    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new OrderMaterialTable().openFrame();
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    public void showDataRecord() {
        String sql = "select MAT_NAME, V_NAME, MOD_REC_DATE, MOD_AMOUNT "
                + "from MAT_ORDER_DETAIL natural join PRODUCE natural join material  natural join vendor  where MOR_ID = " + mor_id + " order by MOD_REC_DATE DESC;";
        //System.out.println(sql);
        try (Connection conn = Gui_db.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            int row = 0;
            while (rs.next()) {
                model.addRow(data);
                model.setValueAt(false, row, 0);
                model.setValueAt(row + 1, row, 1);
                model.setValueAt(rs.getString(1), row, 2);
                model.setValueAt(rs.getString(2), row, 3);
                model.setValueAt(rs.getString(3), row, 4);
                model.setValueAt(rs.getString(4), row, 5);

                row++;
            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public String getCheckRow() {
        String checkRow = "";
        for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(orderMaterialTable.getValueAt(i, 0).toString())) {
                checkRow += orderMaterialTable.getValueAt(i, 2).toString() + ", ";

            }
        }

        return checkRow;
    }

    public String getMatNameToUpdate() {
        String matname = "";
        for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(orderMaterialTable.getValueAt(i, 0).toString())) {
                matname += orderMaterialTable.getValueAt(i, 2).toString();

            }
        }

        return matname;
    }

    public String getVnameToUpdate() {
        String vname = "";
        for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(orderMaterialTable.getValueAt(i, 0).toString())) {

                vname += orderMaterialTable.getValueAt(i, 3).toString();

            }
        }

        return vname;
    }

    public String getDateToUpdate() {
        String racdate = "";
        for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(orderMaterialTable.getValueAt(i, 0).toString())) {

                racdate += orderMaterialTable.getValueAt(i, 4).toString();

            }
        }

        return racdate;
    }

    public String getAmountToUpdate() {
        String amount = "";
        for (int i = 0; i < orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(orderMaterialTable.getValueAt(i, 0).toString())) {

                amount += orderMaterialTable.getValueAt(i, 5).toString();

            }
        }

        return amount;
    }

    public String callGetMatName() {
        return OMDT_FRAME.getMatName();
    }

    public String callGetVName() {
        return OMDT_FRAME.getVName();
    }

    public String getMatNameEdit() {

        String matName = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {
                matName += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 2).toString() + "'";

            }
        }

        return matName;

    }
    
    
     public String getVNameEdit() {

        String Vname = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {

                Vname += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 3).toString() + "'";

            }
        }

        return Vname;

    }

    public String getMatName() {

        String matName = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString()) || !Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {
                matName += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 2).toString() + "', ";

            }
        }

        if (matName.equals("")) {
            return "''";
        }

        return matName.substring(0, matName.length() - 2);

    }

    public String getVName() {

        String Vname = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString()) || !Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {

                Vname += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 3).toString() + "', ";

            }
        }

        if (Vname.equals("")) {
            return "''";
        }

        return Vname.substring(0, Vname.length() - 2);

    }

    public void clearRow() {
        int row = model.getRowCount() - 1;
        while (row > -1) {
            model.removeRow(row);
            row--;
        }
    }

    public String getMatNameToDel() {

        String matName = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {
                matName += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 2).toString() + "', ";

            }
        }

        return matName.substring(0, matName.length() - 2);

    }

    public String getVNameToDel() {

        String Vname = "";
        for (int i = 0; i < OMDT_FRAME.orderMaterialTable.getRowCount(); i++) {
            if (Boolean.valueOf(OMDT_FRAME.orderMaterialTable.getValueAt(i, 0).toString())) {

                Vname += "'" + OMDT_FRAME.orderMaterialTable.getValueAt(i, 3).toString() + "', ";

            }
        }

        return Vname.substring(0, Vname.length() - 2);

    }

    public void enableButtonCheck() {
        String check = getCheckRow();
        String[] s = check.split(", ");
        if (orderMaterialTable.getRowCount() > 0) {
            checkAllButton.setEnabled(true);
        } else {
            checkAllButton.setEnabled(false);
        }

        if (s.length == 1 && s[0].equals("")) {
            poEditButton.setEnabled(false);
            poDeleteButton.setEnabled(false);

            checkAllButton.setText("เลือกทั้งหมด");
        } else if (s.length == 1) {
            poEditButton.setEnabled(true);
            poDeleteButton.setEnabled(true);

            checkAllButton.setText("ยกเลิกการเลือก");
        } else {
            poDeleteButton.setEnabled(true);
            poEditButton.setEnabled(false);

        }
    }

    public void callClearRow() {
        OMDT_FRAME.clearRow();
    }

    public void callShowDataRecord() {
        OMDT_FRAME.showDataRecord();
    }

    public void callEnableButtonCheck() {
        OMDT_FRAME.enableButtonCheck();
    }

    public void callEnableAddBtn(boolean value) {
        OMDT_FRAME.poInsertButton.setEnabled(value);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MainMenuButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton checkAllButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mor_idTxt;
    private javax.swing.JTable orderMaterialTable;
    private javax.swing.JButton poDeleteButton;
    private javax.swing.JButton poEditButton;
    private javax.swing.JButton poInsertButton;
    // End of variables declaration//GEN-END:variables

}
