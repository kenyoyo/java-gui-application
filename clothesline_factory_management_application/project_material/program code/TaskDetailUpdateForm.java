/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_db;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author KAZDO
 */
public class TaskDetailUpdateForm extends javax.swing.JFrame {
    private static TaskDetailUpdateForm MY_FRAME = new TaskDetailUpdateForm();
    private static String deliTaskId;
    private static String deliveryId;
    /**
     * Creates new form OrderProductForm
     */
    public TaskDetailUpdateForm() {
        initComponents();
    }
    
    public void openFrame(String deliveryId, String taskId, String instanceId, String orderNumber) {
        deliTaskId = taskId;
        this.deliveryId = deliveryId;
        MY_FRAME.labelOrderNumber.setText(orderNumber);
        MY_FRAME.setInTaskAmount(instanceId);
        MY_FRAME.setMustDeliAmount(instanceId);
        MY_FRAME.setEmptyArea();
        MY_FRAME.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        labelOrderNumber = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        labelMustDeliAmount = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelIntaskAmount = new javax.swing.JLabel();
        btnTakeIn = new javax.swing.JButton();
        btnTakeOut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        labelEmptyArea = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(104, 195, 163));

        jLabel3.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("วางจำนวนสินค้า");

        txtAmount.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        jLabel1.setText("ออเดอร์สินค้าหมายเลข");

        labelOrderNumber.setFont(new java.awt.Font("TH SarabunPSK", 1, 22)); // NOI18N
        labelOrderNumber.setText("1");

        jPanel2.setBackground(new java.awt.Color(104, 195, 163));

        jLabel5.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        jLabel5.setText("จำนวนขาดส่ง:");

        labelMustDeliAmount.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        labelMustDeliAmount.setText("0");

        jLabel4.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        jLabel4.setText("จำนวนในรอบ:");

        labelIntaskAmount.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        labelIntaskAmount.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMustDeliAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelIntaskAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(labelMustDeliAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labelIntaskAmount))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        btnTakeIn.setBackground(new java.awt.Color(236, 240, 241));
        btnTakeIn.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        btnTakeIn.setText("เพิ่มสินค้า");
        btnTakeIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeInActionPerformed(evt);
            }
        });

        btnTakeOut.setBackground(new java.awt.Color(236, 240, 241));
        btnTakeOut.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        btnTakeOut.setText("ลดสินค้า");
        btnTakeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeOutActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        jLabel2.setText("จำนวนที่ว่างในรอบการขนส่ง:");

        labelEmptyArea.setFont(new java.awt.Font("TH SarabunPSK", 1, 24)); // NOI18N
        labelEmptyArea.setText("450");

        titleLabel.setFont(new java.awt.Font("TH SarabunPSK", 1, 36)); // NOI18N
        titleLabel.setText("จัดการจำนวนสินค้าในรอบการส่ง");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(labelEmptyArea)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnTakeIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTakeOut))
                    .addComponent(titleLabel))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labelEmptyArea, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTakeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTakeIn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTakeInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeInActionPerformed
        takeInData();
    }//GEN-LAST:event_btnTakeInActionPerformed

    private void btnTakeOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeOutActionPerformed
        takeOutData();
    }//GEN-LAST:event_btnTakeOutActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed
    
    public void takeInData() {
        if(isNumeric(MY_FRAME.txtAmount.getText())) {
            int emptyArea = Integer.parseInt(MY_FRAME.labelEmptyArea.getText());
            int mustDelivery = Integer.parseInt(MY_FRAME.labelMustDeliAmount.getText());
            int takeInAmount = Integer.parseInt(MY_FRAME.txtAmount.getText());
            if(mustDelivery - takeInAmount < 0) {
                JOptionPane.showMessageDialog(null, "การเพิ่มจำนวนสินค้าล้มเหลวเนื่องจากวางจำนวนสินค้าเกินจำนวนขาดส่งในออเดอร์");
            } else if(emptyArea - takeInAmount < 0) {
                JOptionPane.showMessageDialog(null, "การเพิ่มจำนวนสินค้าล้มเหลวเนื่องจากวางจำนวนสินค้าเกินจำนวนที่ว่างในรอบการขนส่ง");
            } else {
                String prodId = MY_FRAME.labelOrderNumber.getText();
                String instanceId = "";
                String sql = "select INSTANCE_ID, TD_AMOUNT from instance natural join task_detail"
                           + " where PORDER_ID = " + prodId
                           + " and DTASK_ID = " + deliTaskId;
                try (
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql)){
                        while(rs.next()) {
                            takeInAmount += Integer.parseInt(rs.getString(2));
                            instanceId = rs.getString(1);
                        }
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                
                sql = "update task_detail"
                    + " set TD_AMOUNT = " + takeInAmount
                    + " where INSTANCE_ID = " + instanceId + " and DTASK_ID = " + deliTaskId;
                
                    try {
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        stmt.executeUpdate(sql);
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                    
                String query = "{ call update_deli_task_amount(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliTaskId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                query = "{ call update_delivery_amount_cost(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliveryId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                try (Connection conn = Gui_db.getConnection();    
                CallableStatement cs = conn.prepareCall("{call get_prodId_to_reduce(?)}")) {
                cs.setString(1, instanceId);
                ResultSet rs = cs.executeQuery();
                while(rs.next()) {
                    CallableStatement cs2 = conn.prepareCall("{ call update_product_amount(?,?) }");
                    cs2.setString(1, rs.getString("PROD_ID"));
                    cs2.setString(2, "-"+rs.getString("INDE_AMOUNT"));
                    cs2.executeQuery();
                }
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                TaskDetailTable tdt = new TaskDetailTable();
                MY_FRAME.setEmptyArea();
                MY_FRAME.setInTaskAmount(instanceId);
                MY_FRAME.setMustDeliAmount(instanceId);
                tdt.callClearRow();
                tdt.callShowDataRecord();
                tdt.callsetEmptyBlock();
                JOptionPane.showMessageDialog(null, "เพิ่มจำนวนสินค้าเรียบร้อยแล้ว");
                clearTextBox();
            }
        } else {
            JOptionPane.showMessageDialog(null, "กรุณาใส่จำนวนให้ถูกต้อง");
        }
    }
    
    public void takeOutData() {
        if(isNumeric(MY_FRAME.txtAmount.getText())) {
            int inTaskAmount = Integer.parseInt(MY_FRAME.labelIntaskAmount.getText());
            int takeOutAmount = Integer.parseInt(MY_FRAME.txtAmount.getText());
            if(inTaskAmount - takeOutAmount < 0) {
                JOptionPane.showMessageDialog(null, "การลดจำนวนสินค้าล้มเหลวเนื่องจากวางจำนวนสินค้าเกินจำนวนสินค้าในรอบการขนส่ง");
            } else {
                String prodId = MY_FRAME.labelOrderNumber.getText();
                String instanceId = "";
                String sql = "select INSTANCE_ID, TD_AMOUNT from instance natural join task_detail"
                           + " where PORDER_ID = " + prodId
                           + " and DTASK_ID = " + deliTaskId;
                try (
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql)){
                        while(rs.next()) {
                            takeOutAmount = Integer.parseInt(rs.getString(2)) - takeOutAmount;
                            instanceId = rs.getString(1);
                        }
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                boolean isFull = false;
                if(labelMustDeliAmount.getText().equals("0"))
                    isFull=true;
                
                sql = "update task_detail"
                    + " set TD_AMOUNT = " + takeOutAmount
                    + " where INSTANCE_ID = " + instanceId + " and DTASK_ID = " + deliTaskId;
                    try {
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        stmt.executeUpdate(sql);
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
                    
                String query = "{ call update_deli_task_amount(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliTaskId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                query = "{ call update_delivery_amount_cost(?) }";
 
                try (Connection conn = Gui_db.getConnection();
                CallableStatement stmt = conn.prepareCall(query)) {
 
                stmt.setString(1, deliveryId);
                stmt.executeQuery();
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                }
                
                if(isFull) {
                    try (Connection conn = Gui_db.getConnection();    
                    CallableStatement cs = conn.prepareCall("{call get_prodId_to_add(?)}")) {
                    cs.setString(1, instanceId);
                    ResultSet rs = cs.executeQuery();
                    while(rs.next()) {
                        CallableStatement cs2 = conn.prepareCall("{ call update_product_amount(?,?) }");
                        cs2.setString(1, rs.getString("PROD_ID"));
                        cs2.setString(2, rs.getString("INDE_AMOUNT"));
                        cs2.executeQuery();
                    }
                    } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                    }
                }
                
                TaskDetailTable tdt = new TaskDetailTable();
                MY_FRAME.setEmptyArea();
                MY_FRAME.setInTaskAmount(instanceId);
                MY_FRAME.setMustDeliAmount(instanceId);
                tdt.callClearRow();
                tdt.callShowDataRecord();
                tdt.callsetEmptyBlock();
                JOptionPane.showMessageDialog(null, "ลดจำนวนสินค้าเรียบร้อยแล้ว");
                clearTextBox();
            }
        } else {
            JOptionPane.showMessageDialog(null, "กรุณาใส่จำนวนให้ถูกต้อง");
        }
    }
        
    public void clearTextBox() {
        MY_FRAME.txtAmount.setText("");
    }
    
    public void setEmptyArea() {
        String sql = "select DTASK_AMOUNT from deli_task where DTASK_ID = " + deliTaskId;
        int total = 450;
        try (Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {
                while(rs.next()) {  
                    total -= Integer.parseInt(rs.getString(1));
                }
                MY_FRAME.labelEmptyArea.setText("" + total);
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }
    
    public void setMustDeliAmount(String instanceId) {
        String sql = "select (INSTANCE_TOTAL_AMOUNT-sum(TD_AMOUNT)) as result from task_detail natural join instance"
                   + " where INSTANCE_ID = " + instanceId + " group by INSTANCE_ID";
        try (
            Connection conn = Gui_db.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)){
            while(rs.next()) {
                MY_FRAME.labelMustDeliAmount.setText(rs.getString(1));
            }
        } catch (SQLException ex) {
                System.out.println(ex.getMessage());
        }
    }
    
    public void setInTaskAmount(String instanceId) {
    String sql = "select TD_AMOUNT from task_detail"
               + " where INSTANCE_ID = " + instanceId
               + " and DTASK_ID = " + deliTaskId;
                try (
                        Connection conn = Gui_db.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql)){
                        while(rs.next())
                            MY_FRAME.labelIntaskAmount.setText(rs.getString(1));
                    } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                }
    }
    
    public static boolean isNumeric(String str) {
        return str.matches("-?\\d+(\\.\\d+)?") && Integer.parseInt(str)>0;  //match a number with optional '-' and decimal.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTakeIn;
    private javax.swing.JButton btnTakeOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelEmptyArea;
    private javax.swing.JLabel labelIntaskAmount;
    private javax.swing.JLabel labelMustDeliAmount;
    private javax.swing.JLabel labelOrderNumber;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField txtAmount;
    // End of variables declaration//GEN-END:variables
}
